modeltype UML uses uml('http://www.eclipse.org/uml2/5.0.0/UML');
modeltype METACON uses mETACON('http://www.example.org/mETACON');

transformation uml2metacon(in source:UML, out target:METACON);

main() {
	source.rootObjects()[Model] -> map Model2Dictionary();
}

-- Specifying the Model2Dictionary map
mapping uml::Model :: Model2Dictionary(): mETACON::Dictionary{
	name:=self.name;
	element += self.packagedElement->select(e | e.oclIsKindOf(Package))[Package]->map Package2Dictionary();
}

-- Specifying the Package2Dictionary map
mapping uml::Package :: Package2Dictionary(): mETACON::Dictionary{
	-- name is mapped to name...
	name:=self.name;
	-- The Package element can contain other Packages or classes
	-- so we have to consider these two possibilities...
	element += self.packagedElement -> select(e | e.oclIsKindOf(Package))[Package] -> map Package2Dictionary();
	element += self.packagedElement -> select(e | e.oclIsKindOf(Class))[Class] -> map Class2Concept();
}

-- Specifying the Class2Concept map
mapping uml::Class :: Class2Concept(): mETACON::Concept{
	-- LOCAL VARIABLES
	var umlPublicVis = uml::VisibilityKind::public;
	var umlPrivateVis = uml::VisibilityKind::private;
	var umlProtectedVis = uml::VisibilityKind::protected;
	var umlPackageVis = uml::VisibilityKind::package;
	
	var conPublicVis = mETACON::Visibility::cp_public;
	var conPrivateVis = mETACON::Visibility::cp_private;
	
	-- again, name is mapped to name...
	name:=self.name;
	
	-- Visibility mapping
	if self.visibility.oclIsUndefined() then{
		vis:= conPublicVis;
	}else if self.visibility = umlPublicVis then{
		vis:= conPublicVis;
	}else {
		vis:= conPrivateVis;
	} 
	endif
	endif ;
	ownedProperty += self.ownedAttribute -> select(a | a.oclIsKindOf(Property))[Property] ->map Prop2Prop();
	ownedAction += self.ownedOperation -> select(a | a.oclIsKindOf(Operation))[Operation] ->map Operation2Action();
	
}

-- Specifying the Operation2Action map
mapping uml::Operation :: Operation2Action() : mETACON::Action{
	name := self.name;
	ownedParameter := self.ownedParameter -> select(a | a.oclIsKindOf(Parameter))[Parameter] ->map Parameter2Parameter();
}

-- Specifying the Parameter2Parameter map
mapping uml::Parameter :: Parameter2Parameter() : mETACON::Parameter{
	var inDir = uml::ParameterDirectionKind::_in;
	var returnDir = uml::ParameterDirectionKind::_return;
	var outDir = uml::ParameterDirectionKind::_out;
	var inoutDir = uml::ParameterDirectionKind::_inout;
	
	name := self.name;
	if self.type.oclIsUndefined() then {
		type := 'void';
	} else {
		type := self.type.name;
	} endif;
	
	-- Mapping Direction
	if(self.direction.oclIsUndefined()) then{
		direction := mETACON::Direction::c_in;
	}else if(self.direction = inDir) then {
		direction := mETACON::Direction::c_in;
	}else if(self.direction = outDir)then{
		direction := mETACON::Direction::c_out;
	}else if(self.direction = inoutDir) then{
		direction := mETACON::Direction::c_inout;
	}else{
		direction := mETACON::Direction::c_return;
	} endif endif endif endif
	
}

-- Specifying the Prop2Prop map
mapping uml::Property :: Prop2Prop(): mETACON::Property{
	name := self.name;
	
	-- Mapeando os tipos
	if self.type.oclIsUndefined() then {
		type := 'void';
	}else{
		type := self.type.name;
	} endif
}